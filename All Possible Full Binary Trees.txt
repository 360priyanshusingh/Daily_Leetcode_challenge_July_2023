/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,vector<TreeNode*>> pm;
    vector<TreeNode*> helper(int n){
         vector<TreeNode*> res;

        if(n%2==0){
            return res;
        }

        if(n==1){
            TreeNode* newnode= new TreeNode(0);
            return {newnode};
        }
        if(pm.count(n)){
            return pm[n];
        }
        
        for(int i=0;i<n;i++){

            auto left=helper(i);
            auto right=helper(n-1-i);

            for(auto l:left){
                for(auto r:right){
                      TreeNode* newnode= new TreeNode(0);
                      newnode->left=l;
                      newnode->right=r;
                      res.push_back(newnode);
                }       
            }
        }
       

       return pm[n]=res;
    }
    vector<TreeNode*> allPossibleFBT(int n) {
        return helper(n);
    }
};