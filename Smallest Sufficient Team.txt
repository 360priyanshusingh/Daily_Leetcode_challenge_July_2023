class Solution {
public:
    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {
        unordered_map<string,int> mp;

        for(int i=0;i<req_skills.size();i++){
           mp[req_skills[i]]=i;
        }

        unordered_map<int,vector<int> > dp;
         dp[0] = {};
         
        for(int i=0;i<people.size();i++){
            int person_bit=0;
            for(int j=0;j<people[i].size();j++){
                person_bit |=(1<<mp[people[i][j]]);
            }

            vector<int> tem;
            for(auto w:dp){
                tem.push_back(w.first);
            }


            for(int k=0;k<tem.size();k++){
                int new_bit=tem[k] | person_bit ;

                if(dp.find(new_bit)==dp.end()  || dp[new_bit].size() > dp[tem[k]].size()+1){
                    dp[new_bit]=dp[tem[k]];
                    dp[new_bit].push_back(i);
                }
            }

        }

    return dp[(1<<(req_skills.size()))-1];
    }
};