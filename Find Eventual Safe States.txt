class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<vector<int>> reveadj(n);
        vector<int> indgree(n,0);

        for(int i=0;i<n;i++){
            for(auto a:graph[i]){
                reveadj[a].push_back(i);
                indgree[i]++;
            }
        }
        queue<int> q;
        for(int i=0;i<n;i++){
            if(indgree[i]==0)
              q.push(i);
        }

        vector<int> safenode;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            safenode.push_back(node); 
            for(auto a:reveadj[node]){
                indgree[a]--;
                if(indgree[a]==0){
                    q.push(a);
                }

            }
        }

        sort(safenode.begin(),safenode.end());

        return safenode;
    }
};