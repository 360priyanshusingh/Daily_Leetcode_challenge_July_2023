/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void make_parent(TreeNode* root,unordered_map<TreeNode*,TreeNode*> &mp){
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
           TreeNode* curr=q.front();
            q.pop();
            if(curr->left!=NULL){
                q.push(curr->left);
                mp[curr->left]=curr;
            }
             if(curr->right!=NULL){
                q.push(curr->right);
                mp[curr->right]=curr;
            }
        }


    }

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> mp;
        make_parent(root,mp);

      queue<TreeNode*> q;
      unordered_map<TreeNode*,bool> visited;
      q.push(target);
      visited[target]=true;
      int s=0;
      while(!q.empty()){
          int size=q.size();
          if(s==k) break;

          for(int i=0;i<size;i++){
              TreeNode* curr=q.front();
              q.pop();
                
              if(curr->left!=NULL && !visited[curr->left]){
                  q.push(curr->left);
                  visited[curr->left]=true;
              }

              if(curr->right!=NULL && !visited[curr->right]){
                  q.push(curr->right);
                   visited[curr->right]=true;
              }

              if(mp[curr]!=NULL && !visited[mp[curr]]){
                  q.push(mp[curr]);
                visited[mp[curr]]=true;
              }
             
          }

       s++;
      }

      vector<int> ans;
      while(!q.empty()){
          ans.push_back(q.front()->val);
          q.pop();
      }
    
    return ans;
    }
};